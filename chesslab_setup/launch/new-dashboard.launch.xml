<?xml version="1.0" ?>
<launch>

        <arg name="is_using_eseries" default="true" />
        <arg name="team_A_enabled" default="true" />
        <arg name="my_robot_ip" default="10.5.20.80" />
        <arg name="e-series" default="false" />

        <arg name="camera_enabled" default="false" />

        <!-- switch between real and simulated.. or simply display -->
        <arg name="load_real" default="false" />
        <arg name="load_sim" default="false" />

        <!-- run aruco detector nodes-->
        <arg name="load_aruco_detector" default="false" />

        <!-- load additional services -->
        <arg name="load_services" default="false" />
        <!-- load action clients -->
        <!--arg name="load_action_clients" default="false" /-->

        <!-- choose whether to use the trajectory controller with the gripper or use a separete controller for the gripper -->
        <arg name="controller_with_gripper" default="false" />

        <!-- choose whether to visualize -->
        <arg name="show_rviz" default="false" />

        <!-- choose GUI control options -->
        <arg name="joint_gui" default="false" />
        <arg name="joint_gui_controller" default="false" />

        <!-- Gazebo starts PAUSED by default -->
        <!-- This way we can fix the joint values when spawned -->
        <arg name="paused" default="true" />

        <arg name="team_A_shoulder_pan_joint_initial_value" default="-1.89" />
        <arg name="team_A_shoulder_lift_joint_initial_value" default="-1.44" />
        <arg name="team_A_elbow_joint_initial_value" default="-2.14" />
        <arg name="team_A_wrist_1_joint_initial_value" default="-1.15" />
        <arg name="team_A_wrist_2_joint_initial_value" default="1.53" />
        <arg name="team_A_wrist_3_joint_initial_value" default="-1.95" />
        <arg name="team_A_gripper_right_driver_joint_initial_value" default="0.5" />

        <!-- configuration of the simulation -->
        <group if="$(arg load_sim)">
            <include file="$(find gazebo_ros)/launch/empty_world.launch">
                <arg name="world_name" value="$(find chesslab_setup)/worlds/flat_chesslab.world"/>
                <arg name="paused" value="$(arg paused)" />
                <arg name="gui" value="true" />
                <arg name="use_sim_time" default="true"/>
                <arg name="headless" default="false"/>
                <arg name="debug" default="false"/>
            </include>
        </group>

        <!-- Define the chess_frame where chess objects and cameras are referenced -->
        <node pkg="tf2_ros" type="static_transform_publisher" name="chess_frame_broadcaster" args="0.0 0.0 0.0  0.0 0.0 0.0 world chess_frame" />


        <!-- TEAM A LAUNCH -->
        <group if="$(arg team_A_enabled)" ns="team_A_arm">

            <!-- send robot urdf to param server -->
            <group if="$(arg e-series)">
                <param name="robot_description" command="$(find xacro)/xacro '$(find chesslab_setup)/robot/team_A_arm_gripper.urdf.xacro'  using_eseries:=$(arg is_using_eseries)"/>
            </group>
            <group unless="$(arg e-series)">
                <param name="robot_description" command="$(find xacro)/xacro '$(find chesslab_setup)/robot/team_A_arm_gripper.urdf.xacro'  using_eseries:=$(arg is_using_eseries)"/>
            </group>

            <!-- joint and state publishers -->
            <param name="publish_frequency" value="100"/>
            <group if="$(arg joint_gui)">
                <node name="joint_state_publisher_gui" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" />
            </group>
            <!-- state publishers -->
            <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

            <!-- SIMULATION -->
            <group if="$(arg load_sim)">


               <!-- load all controllers configurations -->
               <rosparam file="$(find chesslab_setup)/config/new_controllers.yaml" command="load"/>
               <!-- within namespace to fit the real part; see below-->
               <group ns="gripper">
                  <rosparam file="$(find chesslab_setup)/config/new_controllers_gripper.yaml" command="load"/>
               </group>

               <!-- arm controllers -->

                <group unless="$(arg joint_gui)">
                    <node if="$(arg controller_with_gripper)" name="load_and_start_controller" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_state_controller joint_trajectory_controller_with_gripper" />
                    <node unless="$(arg controller_with_gripper)" name="load_and_start_controller" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_state_controller joint_trajectory_controller gripper/joint_state_controller gripper/gripper_controller" />
                </group>

               <node name="spawn_team_A_arm_model" pkg="gazebo_ros" type="spawn_model"
                          args="-urdf -param /team_A_arm/robot_description -model team_A_arm
                                -J team_A_shoulder_pan_joint $(arg team_A_shoulder_pan_joint_initial_value)
                                -J team_A_shoulder_lift_joint $(arg team_A_shoulder_lift_joint_initial_value)
                                -J team_A_elbow_joint $(arg team_A_elbow_joint_initial_value)
                                -J team_A_wrist_1_joint $(arg team_A_wrist_1_joint_initial_value)
                                -J team_A_wrist_2_joint $(arg team_A_wrist_2_joint_initial_value)
                                -J team_A_wrist_3_joint $(arg team_A_wrist_3_joint_initial_value)
                                -J team_A_gripper_right_driver_joint $(arg team_A_gripper_right_driver_joint_initial_value)" respawn="false" output="screen" />
            </group>

            <!-- REAL -->
            <group if="$(arg load_real)">
                <!-- arm hwiface -->
                <!-- loads robot description, driver, controllers and controller manager-->
                <group if="$(arg e-series)">
                	<include file="$(find chesslab_setup)/launch/ur3e_bringup_custom.launch">
                        <arg name="controller_config_file" value="$(find chesslab_setup)/config/new_controllers.yaml"/>
                        <arg name="controllers" value="joint_state_controller joint_trajectory_controller"/>
                        <arg name="robot_description_file" value="$(find chesslab_setup)/launch/ur3_upload_custom.launch"/>
                        <arg name="stopped_controllers" value="joint_velocity_controller"/>
                        <arg name="robot_ip" value="$(arg my_robot_ip)"/>
                        <arg name="kinematics_config" value="$(find chesslab_setup)/config/my_robot_calibration.yaml"/>
	                </include>
                </group>
                <group unless="$(arg e-series)">
                    <include file="$(find chesslab_setup)/launch/ur3_bringup_custom.launch">
                        <arg name="controller_config_file" value="$(find chesslab_setup)/config/new_controllers.yaml"/>
                        <arg name="controllers" value="joint_state_controller joint_trajectory_controller"/>
                        <arg name="robot_description_file" value="$(find chesslab_setup)/launch/ur3_upload_custom.launch"/>
                        <arg name="stopped_controllers" value="joint_velocity_controller"/>
                        <arg name="robot_ip" value="$(arg my_robot_ip)"/>
                        <arg name="kinematics_config" value="$(find chesslab_setup)/config/my_robot_calibration.yaml"/>
                    </include>
                </group>

                <!-- gripper hwiface -->
                <!-- within gripper namespace to avoid collision between hardware interfaces -->
                <group ns="gripper">
                  <!-- Starting the gripper -->
                  <node name="Robotiq2FGripperRtuNode" pkg="robotiq_2f_gripper_control" type="Robotiq2FGripperRtuNode.py" args="/dev/ttyUSB0"/>
                  <!-- Starting the gripper_server -->
                  <node name="gripper_server" pkg="robotiq_2f_gripper_server" type="gripper_server"  launch-prefix="xterm -e"/>

                  <!--rosparam file="$(find chesslab_setup)/config/new_controllers_gripper.yaml" command="load"/>
                  <node name="gripper_hardware_interface" pkg="robotiq_2f_hw_usb" type="robotiq_2f_hw_usb_node" respawn="false" output="screen">
                    <param name="port" type="str" value="/dev/ttyUSB0" />
                    <param name="server_id" type="int" value="9" />
                    <param name="name" type="str" value="team_A_gripper" />
                  </node>
                  <node  name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_state_controller gripper_controller"/-->
                </group>
            </group>

            <group if="$(arg joint_gui_controller)">
                <node name="team_A_arm_gui" pkg="rqt_gui" type="rqt_gui" respawn="false" args="--perspective-file $(find chesslab_setup)/config/team_A_all.perspective" output="screen" />
            </group>
        </group>

        <!-- CAMERAS -->
        <group if="$(arg camera_enabled)">
            <!-- spawn for simulation -->
            <group if="$(arg load_sim)" >
                <group ns="camera_right">
                    <!-- send robot urdf to param server -->
                    <param name="robot_description" command="$(find xacro)/xacro $(find chesslab_setup)/robot/camera_right.urdf.xacro" />
                    <param name="publish_frequency" value="100"/>
                    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
                    <!-- launches the image rectification -->
                    <node ns="color" name="image_proc_camera_right" pkg="image_proc" type="image_proc" />
                </group>

                <node name="spawn_camera_model_right" pkg="gazebo_ros" type="spawn_model" args="-urdf -param camera_right/robot_description -model camera_right" respawn="false" output="screen" />

                <group if="$(arg load_aruco_detector)" >
                    <node pkg="aruco_ros" type="marker_publisher" name="aruco_marker_publisher">
                        <remap from="/camera_info" to="/camera_right/color/camera_info" />
                        <remap from="/image" to="/camera_right/color/image_rect" />
                        <param name="image_is_rectified" value="True"/>
                        <param name="marker_size"        value="0.026"/> <!--size of markers in simulation-->
                        <param name="reference_frame"    value="camera_right_link"/>   <!-- frame in which the marker pose will be refered -->
                        <param name="camera_frame"       value="camera_right_color_optical_frame"/>
                        <param name="corner_refinement" value="LINES" /> <!-- NONE, HARRIS, LINES, SUBPIX -->
                    </node>

                    <node name="aruco_broadcaster" pkg="aruco_broadcaster" type="aruco_broadcaster" output="screen"/>
                    <rosparam file="$(find aruco_broadcaster)/config/tablesetup-pl2esaii_sim.yaml" command="load" ns="/aruco_broadcaster"/>
                </group>
            </group>

            <group if="$(arg load_real)">
                <include file="$(find tablesens)/launch/aruco_realsense.launch"/><!--size of markers in real defined here-->
                <group if="$(arg load_aruco_detector)" >
                    <node name="aruco_broadcaster" pkg="aruco_broadcaster" type="aruco_broadcaster" output="screen"/>
                    <rosparam file="$(find aruco_broadcaster)/config/tablesetup-pl2esaii.yaml" command="load" ns="/aruco_broadcaster" />
                </group>
            </group>
        </group>

        <!-- rviz: opens config file with cameras if they are enabled -->
        <group if="$(arg show_rviz)">
            <group unless="$(arg camera_enabled)">
                <node name="chess_rviz" pkg="rviz" type="rviz" respawn="false" args="-d $(find chesslab_setup)/config/chesslab_simple.rviz" output="screen"/>
            </group>
            <group if="$(arg camera_enabled)">
                <node name="chess_rviz" pkg="rviz" type="rviz" respawn="false" args="-d $(find chesslab_setup)/config/chesslab_simple_cameras.rviz" output="screen"/>
            </group>
        </group>

        <!-- services -->
        <group if="$(arg load_services)">
            <node name="chesslab_setup_node" pkg="chesslab_setup" type="chesslab_setup_node" output="screen" />
            <node name="kautham_node" pkg="kautham" type="kautham-rosnode" launch-prefix="xterm -e" />
            <node name="ur3ik_server" pkg="ur3ik" type="urik-node" />
            <node pkg="downward_ros" name="downward_server" type="downward_server.py" launch-prefix="xterm -e" respawn="true"/>
        </group>
        <!--group if="$(arg load_action_clients)">
            <node name="ur3_action_client" pkg="test_hardware" type="ur3_action_client" launch-prefix="xterm -e"/>
            <node name="gripper_client" pkg="robotiq_2f_gripper_server" type="gripper_client" launch-prefix="xterm -e"/>
        </group-->
</launch>
